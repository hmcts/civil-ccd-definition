#!groovy

@Library("Infrastructure")
import uk.gov.hmcts.contino.GithubAPI

def type = "nodejs"
def product = "civil"
def component = "ccd"
def camundaBranch = "master"
def dmnBranch = "CIV-15724-CIV-15729-CIV-15734-CIV-15738-listing-tasks"
def waStandaloneBranch = "master"

def yarnBuilder = new uk.gov.hmcts.contino.YarnBuilder(this)

static Map<String, Object> secret(String secretName, String envVariable) {
  [$class     : 'AzureKeyVaultSecret',
   secretType : 'Secret',
   name       : secretName,
   envVariable: envVariable
  ]
}

def secrets = [
  'rpx-${env}': [
    secret('mc-idam-client-secret', 'IDAM_CLIENT_SECRET'),
  ],
  's2s-${env}'  : [
    secret('microservicekey-ccd-gw', 'CCD_API_GATEWAY_S2S_SECRET'),
    secret('microservicekey-ccd-data', 'CCD_DATA_STORE_S2S_SECRET'),
    secret('microservicekey-ccd-admin', 'ADMIN_S2S_KEY'),
    secret('microservicekey-ccd-definition', 'CCD_DEFINITION_STORE_S2S_SECRET'),
    secret('microservicekey-xui-webapp', 'XUI_S2S_SECRET'),
  ],
  'ccd-${env}'  : [
    secret('ccd-api-gateway-oauth2-client-secret', 'CCD_API_GATEWAY_IDAM_CLIENT_SECRET'),
    secret('ccd-api-gateway-oauth2-client-secret', 'CCD_API_GATEWAY_OAUTH2_CLIENT_SECRET'),
    secret('postcode-info-address-lookup-token', 'ADDRESS_LOOKUP_TOKEN'),
    secret('ccd-admin-web-oauth2-client-secret', 'ADMIN_WEB_IDAM_SECRET'),
    secret('idam-data-store-client-secret', 'IDAM_OAUTH2_DATA_STORE_CLIENT_SECRET'),
    secret('idam-data-store-system-user-username', 'IDAM_DATA_STORE_SYSTEM_USER_USERNAME'),
    secret('idam-data-store-system-user-password', 'IDAM_DATA_STORE_SYSTEM_USER_PASSWORD'),
    secret('microservicekey-ccd-gw', 'CCD_API_GATEWAY_S2S_KEY'),
    secret('ccd-admin-web-oauth2-client-secret', 'ADMIN_WEB_IDAM_SECRET'),
    secret('idam-data-store-system-user-username', 'ROLE_ASSIGNMENT_USER_EMAIL')
  ],
  'civil-${env}': [
    secret('microservicekey-civil-service', 'S2S_SECRET'),
    secret('ccd-importer-username', 'CCD_CONFIGURER_IMPORTER_USERNAME'),
    secret('ccd-importer-password', 'CCD_CONFIGURER_IMPORTER_PASSWORD'),
    secret('ccd-importer-username', 'DEFINITION_IMPORTER_USERNAME'),
    secret('ccd-importer-password', 'DEFINITION_IMPORTER_PASSWORD'),
    secret('postgres-user', 'POSTGRES_USER'),
    secret('postgres-password', 'POSTGRES_PASSWORD'),
    secret('default-password', 'DEFAULT_PASSWORD'),
    secret('judge-default-password', 'JUDGE_DEFAULT_PASSWORD'),
    secret('iac-default-password', 'IAC_DEFAULT_PASSWORD'),
    secret('system-update-user-password', 'SYSTEM_USER_PASSWORD')
  ]
]

def checkForEnableEmailNotifications(branch_name) {
  return checkForPrValuesLabel(branch_name, "enableNotifyEmails")
}

def isHmcEnabled(branch_name) {
  return checkForPrValuesLabel(branch_name, "enableHmc")
}

def checkForPrValuesLabel(branch_name, label) {
  return new GithubAPI(this).getLabelsbyPattern(branch_name, "pr-values:" + label).contains("pr-values:" + label)
}

def createGithubRelease() {
  sh """
    set -e
    ./bin/create-github-release.sh
  """
}

def uploadDmnDiagrams(String env) {
  dir("${WORKSPACE}/bin") {
    tenantId = "civil"
    product = "civil"
    sh """
      ./bin/import-dmn-diagram.sh ${WORKSPACE} ${env} ${tenantId} ${product}
    """
  }
}

def archiveCoreCaseDataDefinitions() {
  if (env.ENVIRONMENT == 'aat') {
    echo "current environment is ${env.ENVIRONMENT}"
    for (PROD_ENV in ["aat", "prod"]) {
      echo "environment is ${PROD_ENV}"
      dir("${WORKSPACE}/bin") {
        sh """
          set -e
          eval \$(./variables/load-${PROD_ENV}-environment-variables.sh)
          ./build-release-ccd-definition.sh ${PROD_ENV}
        """
      }

      dir("${WORKSPACE}/build") {
        steps.archiveArtifacts artifacts: "ccd-release-config/civil-ccd-${PROD_ENV}.xlsx"
      }
    }

  } else if (env.ENVIRONMENT == 'preview') {
    dir("${WORKSPACE}/bin") {
      sh """
          set -e
          eval \$(./variables/load-${env.ENVIRONMENT}-environment-variables.sh ${CHANGE_ID})
          ./build-release-ccd-definition.sh ${env.ENVIRONMENT}
      """
    }

    dir("${WORKSPACE}/build") {
      steps.archiveArtifacts artifacts: "ccd-release-config/civil-ccd-${env.ENVIRONMENT}.xlsx"
    }
  } else {
    dir("${WORKSPACE}/bin") {
      sh """
          set -e
          eval \$(./variables/load-${env.ENVIRONMENT}-environment-variables.sh)
          ./build-release-ccd-definition.sh ${env.ENVIRONMENT}
        """
    }

    dir("${WORKSPACE}/build") {
      steps.archiveArtifacts artifacts: "ccd-release-config/civil-ccd-${env.ENVIRONMENT}.xlsx"
    }
  }
}

def uploadCoreCaseDataDefinitions(env) {
  dir("${WORKSPACE}/bin") {
    ccdDefinitionFilePath = "${WORKSPACE}/build/ccd-release-config/civil-ccd-${env}.xlsx"
    sh """
      set -e
      eval \$(./variables/load-${env}-environment-variables.sh)
      ./utils/ccd-import-definition.sh ${ccdDefinitionFilePath}
    """
  }
}

withPipeline(type, product, component) {
  enableHighLevelDataSetup()
  loadVaultSecrets(secrets)

  onPR {
    env.ENVIRONMENT = "preview"
    env.NODE_TLS_REJECT_UNAUTHORIZED = "0";
    env.CIVIL_SERVICE_URL = "https://civil-ccd-pr-${CHANGE_ID}.preview.platform.hmcts.net"
    if (isHmcEnabled(env.BRANCH_NAME)) {
      env.DEFINITION_STORE_URL_BASE = "http://ccd-definition-store-api-aat.service.core-compute-aat.internal"
      env.CCD_DATA_STORE_URL = "http://ccd-data-store-api-aat.service.core-compute-aat.internal"
      env.CCD_DEF_VERSION = "-${CHANGE_ID}"
    } else {
      env.DEFINITION_STORE_URL_BASE = "https://ccd-definition-store-civil-ccd-pr-${CHANGE_ID}.preview.platform.hmcts.net"
      env.CCD_DATA_STORE_URL = "https://ccd-data-store-api-civil-ccd-pr-${CHANGE_ID}.preview.platform.hmcts.net"
    }
  }
  onMaster {
    env.ENVIRONMENT = "aat"
  }
  onDemo {
    env.ENVIRONMENT = "demo"
  }
  onPerftest {
    env.ENVIRONMENT = "perftest"
  }

  onIthc {
    env.ENVIRONMENT = "ithc"
  }

  before('highleveldatasetup') {
    yarnBuilder.yarn('setup')
    archiveCoreCaseDataDefinitions()
  }

//  before('akschartsinstall'){
//    onPR{
//      if (isHmcEnabled(env.BRANCH_NAME)) {
//        sh """
//          az servicebus topic subscription create --resource-group hmc-shared-aat --namespace-name hmc-servicebus-aat \\
//            --topic-name hmc-to-cft-aat --name hmc-to-civil-subscription-pr-${CHANGE_ID}
//          az servicebus topic subscription rule create --resource-group hmc-shared-aat \\
//            --namespace-name hmc-servicebus-aat --topic-name hmc-to-cft-aat \\
//            --subscription-name hmc-to-civil-subscription-pr-${CHANGE_ID} \\
//            --name hmc-servicebus-aat-subscription-rule-civil \\
//            --filter-sql-expression "hmctsServiceId IN ('AAA7','AAA6')"
//        """
//      }
//    }
//  }

//  before('helmUninstall') {
//    onPR {
//      if (isHmcEnabled(env.BRANCH_NAME)) {
//      sh """
//          az servicebus topic subscription delete --resource-group hmc-shared-aat --namespace-name hmc-servicebus-aat \\
//            --topic-name hmc-to-cft-aat --name hmc-to-civil-subscription-pr-${CHANGE_ID}
//          curl -v -k -X DELETE \\
//            'http://ccd-definition-store-api-aat.service.core-compute-aat.internal/api/testing-support/cleanup-case-type/${CHANGE_ID}/?caseTypeIds=CIVIL'
//        """
//    }
//  }

  afterSuccess('akschartsinstall') {
    onPR {
      env.IDAM_API_URL = "https://idam-api.aat.platform.hmcts.net"
      env.SERVICE_AUTH_PROVIDER_API_BASE_URL = "http://rpe-service-auth-provider-aat.service.core-compute-aat.internal"
      env.DM_STORE_URL = "http://dm-store-aat.service.core-compute-aat.internal"
      env.PAYMENT_API_URL = "http://payment-api-aat.service.core-compute-aat.internal"
      env.AAC_API_URL = "https://manage-case-assignment-civil-ccd-pr-${CHANGE_ID}.preview.platform.hmcts.net"
      env.ROLE_ASSIGNMENT_URL = "https://am-role-assignment-civil-ccd-pr-${CHANGE_ID}.preview.platform.hmcts.net"
      sh """
        set -e
        eval \$(./bin/variables/load-preview-environment-variables.sh ${CHANGE_ID})
      ./bin/pull-latest-camunda-files.sh ${camundaBranch}
      ./bin/pull-latest-dmn-files.sh ${dmnBranch}
      ./bin/pull-latest-camunda-wa-files.sh ${waStandaloneBranch}
      ./bin/add-org-roles-to-users.sh
    """
      //uploadDmnDiagrams('preview',"${CHANGE_ID}")
      env.URL = "https://xui-civil-ccd-pr-${CHANGE_ID}.preview.platform.hmcts.net"


      deploymentNumber = githubCreateDeployment()
      githubUpdateDeploymentStatus(deploymentNumber, env.URL)
    }
  }

  afterAlways('smoketest:preview') {
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'test-results/smokeTest/**/*'
    if (checkForEnableEmailNotifications(env.BRANCH_NAME)) {
      error "The 'pr-values:enableNotifyEmails' label is active on the PR. The build will be interrupted to avoid wasting build time needlessly."
    }
  }

  before('functionalTest:preview') {
    env.IDAM_STUB_ENABLED = 'false'
  }

  afterAlways('functionalTest:preview') {
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'test-results/functional/**/*'
  }

  before('smoketest:aat') {
    env.NODE_TLS_REJECT_UNAUTHORIZED = "0";
    env.IDAM_API_URL = "https://idam-api.aat.platform.hmcts.net"
    env.SERVICE_AUTH_PROVIDER_API_BASE_URL = "http://rpe-service-auth-provider-aat.service.core-compute-aat.internal"
    env.CCD_DATA_STORE_URL = "https://civil-ccd-data-store-staging-aat.aat.platform.hmcts.net"
    env.DM_STORE_URL = "http://dm-store-aat.service.core-compute-aat.internal"
    env.PAYMENT_API_URL = "http://payment-api-aat.service.core-compute-aat.internal"
    env.CIVIL_SERVICE_URL = "https://civil-ccd-staging.aat.platform.hmcts.net"
    env.AAC_API_URL = "https://manage-case-assignment-civil-ccd-staging-aat.aat.platform.hmcts.net"
    sh """
      set -e
      eval \$(./bin/variables/load-staging-environment-variables.sh)
      ./bin/add-roles.sh
      ./bin/build-release-ccd-definition.sh staging
      ./bin/pull-latest-camunda-files.sh ${camundaBranch}
    """
    env.URL = "https://civil-ccd-xui-staging.aat.platform.hmcts.net"
    env.CIVIL_SERVICE_URL = "https://civil-ccd-staging.aat.platform.hmcts.net"

    dir("${WORKSPACE}/build") {
      steps.archiveArtifacts artifacts: "ccd-release-config/civil-ccd-staging.xlsx"
    }
    uploadCoreCaseDataDefinitions('staging')
  }

  before('functionalTest:aat') {
    env.IDAM_STUB_ENABLED = 'false'
  }

  afterAlways('smoketest:aat') {
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'test-results/smokeTest/**/*'
  }

  afterAlways('functionalTest:aat') {
    createGithubRelease()
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'test-results/functional/**/*'
  }
}
