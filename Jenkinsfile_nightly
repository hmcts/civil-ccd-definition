#!groovy

properties([
  copyArtifactPermission('/HMCTS_a_to_c_Nightly/civil-ccd-definition/*'),
  parameters([
    choice(name: 'FORCE_GREEN_BUILD', choices: ['false', 'true'], 
      description: 'Should force pipeline to go green by not running any functional tests'),
    choice(name: 'RUN_PREV_FAILED_AND_NOT_EXECUTED_TEST_FILES', choices: ['false', 'true'], 
      description: 'Runs the failed test files and test files that were not executed, contained within the \'testFilesReport.json\', from the latest previous pipeline run'),
    choice(name: 'ENVIRONMENT', choices: ['aat', 'demo', 'preview'], 
      description: 'Environment to test'),
    string(name: 'PLAYWRIGHT_WORKERS', defaultValue: '8', 
      description: 'Number of workers for playwright'),
    string(name: 'PLAYWRIGHT_RETRIES', defaultValue: '1', 
      description: 'Number of times playwright will retry tests'),
    string(name: 'PLAYWRIGHT_EXUI_RETRIES', defaultValue: '1', 
      description: 'Number of times playwright tests will retry exui events'),
    choice(name: 'PLAYWRIGHT_TEST_SPEED', choices: ['fast', 'medium', 'slow'], 
      description: 'Speed playwright performs actions, can be set to \'fast\', \'medium\' or \'slow\''),
    choice(name: 'PLAYWRIGHT_RUN_ACCESSIBILITY_TESTS', choices: ['false', 'true'], 
      description: 'Runs accessibility tests for playwright during test execution'),
    choice(name: 'PLAYWRIGHT_RUN_SETUP', choices: ['true', 'false'], 
      description: 'Runs setup projects before functional test suite'),
    choice(name: 'FRONTEND_URL', 
      choices: [
                  'https://manage-case.aat.platform.hmcts.net', 
                  'https://manage-case.demo.platform.hmcts.net', 
                  'https://manage-case-int1.demo.platform.hmcts.net', 
                  'https://manage-case-int2.demo.platform.hmcts.net',
                  'https://manage-case-wa-int.demo.platform.hmcts.net',
                  'https://manage-case-caa-assigned-case-view.demo.platform.hmcts.net'
                ],
      description: 'The URL you want to run the full functional tests against'),
    choice(name: 'IDAM_WEB_URL', choices: ['https://idam-web.aat.platform.hmcts.net', 'https://idam-web.demo.platform.hmcts.net'], 
      description: 'The URL of idam web'),
    choice(name: 'IDAM_API_URL', choices: ['https://idam-api.aat.platform.hmcts.net', 'https://idam-api.demo.platform.hmcts.net'], 
      description: 'The URL of idam api'),
    choice(name: 'DM_STORE_URL', choices: ['http://dm-store-aat.service.core-compute-aat.internal', 'http://dm-store-demo.service.core-compute-demo.internal'], 
      description: 'The URL of dm store'),
    choice(name: 'SERVICE_AUTH_PROVIDER_API_BASE_URL', choices: ['http://rpe-service-auth-provider-aat.service.core-compute-aat.internal', 'http://rpe-service-auth-provider-demo.service.core-compute-demo.internal'], 
      description: 'The URL of service auth provider'),
    choice(name: 'CCD_DATA_STORE_URL', choices: ['http://ccd-data-store-api-aat.service.core-compute-aat.internal', 'http://ccd-data-store-api-demo.service.core-compute-demo.internal'], 
      description: 'The URL of ccd data store'),
    choice(name: 'CIVIL_SERVICE_URL', choices: ['http://civil-service-aat.service.core-compute-aat.internal', 'http://civil-service-demo.service.core-compute-demo.internal'],
      description: 'The URL of civil service'),
    choice(name: 'WA_TASK_MGMT_URL', choices: ['http://wa-task-management-api-aat.service.core-compute-aat.internal', 'http://wa-task-management-api-demo.service.core-compute-demo.internal'],
       description: 'The URL of wa task management'),
    choice(name: 'PAYMENT_API_URL', choices: ['http://payment-api-aat.service.core-compute-aat.internal', 'http://payment-api-demo.service.core-compute-demo.internal'],
       description: 'The URL of wa task management'),  
    string(name: 'WAIT_FOR_TIMEOUT_MS',
      defaultValue: '120000',
      description: 'Functional tests waitForTimeout value'),
    string(name: 'SECURITY_RULES',
      defaultValue: 'https://raw.githubusercontent.com/hmcts/security-test-rules/master/conf/security-rules.conf',
      description: 'The security rules to use')
  ])
])

@Library("Infrastructure")

def type = "nodejs"
def product = "civil"
def component = "ccd"
def yarnBuilder = new uk.gov.hmcts.contino.YarnBuilder(this)

static Map<String, Object> secret(String secretName, String envVariable) {
  [$class     : 'AzureKeyVaultSecret',
   secretType : 'Secret',
   name       : secretName,
   envVariable: envVariable
  ]
}

void publishBootstrapReport() {
    publishHTML([
            allowMissing: true,
            alwaysLinkToLastBuild: true,
            keepAll: true,
            reportDir: 'playwright-allure-bootstrap-report',
            reportFiles: 'index.html',
            reportName: 'Playwright Allure Bootstrap Report'
        ])
    sh "cp -r ./playwright-allure-bootstrap-report/history/  ./allure-bootstrap-history"
    archiveArtifacts artifacts: 'allure-bootstrap-history/**', fingerprint: true
  }

  void publishFunctionalReport() {
    publishHTML([
            allowMissing: true,
            alwaysLinkToLastBuild: true,
            keepAll: true,
            reportDir: 'playwright-allure-functional-report',
            reportFiles: 'index.html',
            reportName: 'Playwright Allure Functional Report'
        ])
    sh "cp -r ./playwright-allure-functional-report/history/  ./allure-functional-history"
    archiveArtifacts artifacts: 'allure-functional-history/**', fingerprint: true
  }

def copyPreviousHistory(historyDir, resultsDir) {
  def buildFound = false
  def buildNumber = currentBuild.previousBuild ? currentBuild.previousBuild.number : 0
  def minBuildNumber = ((buildNumber - 8) > 0) ? buildNumber - 8 : 0
  while (!buildFound && buildNumber > minBuildNumber) {
    try {
      copyArtifacts projectName: env.JOB_NAME, selector: specific("${buildNumber}"), filter: "**/${historyDir}/**", target: "${resultsDir}"
      sh "mv ${resultsDir}/${historyDir} ${resultsDir}/history"
      buildFound = true
    } catch (Exception error) {
      echo "artifact not found: " + error.toString()
      buildNumber--
    }
  }
}

def copyPrevFailedAndNotExecutedTestFilesJson() {
  def buildFound = false
  def buildNumber = currentBuild.previousBuild ? currentBuild.previousBuild.number : 0
  def minBuildNumber = ((buildNumber - 8) > 0) ? buildNumber - 8 : 0
  while (!buildFound && buildNumber > minBuildNumber) {
    try {
      copyArtifacts projectName: env.JOB_NAME, selector: specific("${buildNumber}"), filter: "test-results/functional/testFilesReport.json"
      buildFound = true
    } catch (Exception error) {
      echo "artifact not found: " + error.toString()
      buildNumber--
    }
  }
}

def secrets = [
  'civil-${env}': [
    secret('microservicekey-civil-service', 'S2S_SECRET'),
    secret('default-password', 'DEFAULT_PASSWORD'),
    secret('judge-default-password', 'JUDGE_DEFAULT_PASSWORD'),
    secret('iac-default-password', 'IAC_DEFAULT_PASSWORD'),
    secret('system-update-user-password', 'SYSTEM_USER_PASSWORD')
  ]
]

withNightlyPipeline(type, product, component) {
  env.FORCE_GREEN_BUILD=params.FORCE_GREEN_BUILD
  env.RUN_PREV_FAILED_AND_NOT_EXECUTED_TEST_FILES=params.RUN_PREV_FAILED_AND_NOT_EXECUTED_TEST_FILES
  env.ENVIRONMENT=params.ENVIRONMENT
  env.PLAYWRIGHT_WORKERS=params.PLAYWRIGHT_WORKERS
  env.PLAYWRIGHT_RETRIES=params.PLAYWRIGHT_RETRIES
  env.PLAYWRIGHT_EXUI_RETRIES=params.PLAYWRIGHT_EXUI_RETRIES
  env.PLAYWRIGHT_RUN_ACCESSIBILITY_TESTS=params.PLAYWRIGHT_RUN_ACCESSIBILITY_TESTS
  env.PLAYWRIGHT_RUN_SETUP=params.PLAYWRIGHT_RUN_SETUP
  env.PLAYWRIGHT_UNASSIGN_CASES = true
  env.PLAYWRIGHT_TEST_SPEED=params.PLAYWRIGHT_TEST_SPEED
  env.URL=params.FRONTEND_URL
  env.DM_STORE_URL=params.DM_STORE_URL
  env.IDAM_WEB_URL=params.IDAM_WEB_URL
  env.IDAM_API_URL=params.IDAM_API_URL
  env.SERVICE_AUTH_PROVIDER_API_BASE_URL = params.SERVICE_AUTH_PROVIDER_API_BASE_URL
  env.CCD_DATA_STORE_URL = params.CCD_DATA_STORE_URL
  env.CIVIL_SERVICE_URL = params.CIVIL_SERVICE_URL
  env.WAIT_FOR_TIMEOUT_MS = params.WAIT_FOR_TIMEOUT_MS
  env.WA_TASK_MGMT_URL = params.WA_TASK_MGMT_URL
  env.PAYMENT_API_URL = params.PAYMENT_API_URL
  env.URL_FOR_SECURITY_SCAN = params.CIVIL_SERVICE_URL
  env.CCD_UI_TESTS = true
  env.RUN_WA_API_TEST = params.ENVIRONMENT == 'preview' ? false : true
  loadVaultSecrets(secrets)

  boolean playwrightSetupPassed = true
  boolean flowInterrupted = false
  boolean forceGreenBuild = env.FORCE_GREEN_BUILD.toBoolean();
  boolean runPrevFailedAndNotExecutedTestFiles = env.RUN_PREV_FAILED_AND_NOT_EXECUTED_TEST_FILES.toBoolean();
  boolean playwrightRunSetup = env.PLAYWRIGHT_RUN_SETUP.toBoolean();


  if(!runPrevFailedAndNotExecutedTestFiles && !forceGreenBuild) {
    afterAlways('DependencyCheckNightly') {
      stage('Playwright test setup') {
        try {
          yarnBuilder.yarn('test:playwright-setup:install')
          if(playwrightRunSetup) {
            yarnBuilder.yarn('test:playwright-e2e-setup:ci')
          }
        } catch (Exception error) {
          if(error instanceof org.jenkinsci.plugins.workflow.steps.FlowInterruptedException) {
            flowInterrupted = true
          }
          if(playwrightRunSetup) {
            playwrightSetupPassed=false
          }
          unstable(message: "${STAGE_NAME} is unstable: " + error.toString())
        } finally {
          if(playwrightRunSetup) {
            yarnBuilder.yarn('test:playwright-bootstrap:generate-report')
          }
        }
      }

      stage('Playwright full functional test') {
        try {
          if(flowInterrupted) {
            throw new org.jenkinsci.plugins.workflow.steps.FlowInterruptedException()
          }
          if(playwrightSetupPassed) {
            yarnBuilder.yarn('test:playwright-e2e-nightly:ci')
          }
        } catch (Exception error) {
          if(error instanceof org.jenkinsci.plugins.workflow.steps.FlowInterruptedException) {
            flowInterrupted = true
          }
          unstable(message: "${STAGE_NAME} is unstable: " + error.toString())
        } finally {
          if(playwrightSetupPassed) {
            copyPreviousHistory('allure-functional-history', 'playwright-allure-functional-results');
            sh 'cp playwright-categories.json playwright-allure-functional-results/categories.json'
            yarnBuilder.yarn('test:playwright-functional:generate-report')
            publishFunctionalReport()
          }
        }
      }

      if(playwrightRunSetup) {
        stage('Playwright test teardown') {
          try {
            yarnBuilder.yarn('test:playwright-e2e-teardown:ci')
          } catch (Exception error) {
            unstable(message: "${STAGE_NAME} is unstable: " + error.toString())
          } finally {
            copyPreviousHistory('allure-bootstrap-history', 'playwright-allure-bootstrap-results');
            sh 'cp playwright-categories.json playwright-allure-bootstrap-results/categories.json'
            yarnBuilder.yarn('test:playwright-bootstrap:generate-report')
            publishBootstrapReport()
          }
        }
      }
    }
  }
  
  if(!forceGreenBuild) {
    before('fullFunctionalTest') {
      if(runPrevFailedAndNotExecutedTestFiles) {
        copyPrevFailedAndNotExecutedTestFilesJson()
      }
    }
  }

  enableFullFunctionalTest(200)

  if(!forceGreenBuild) {
    afterAlways('fullFunctionalTest') {
      archiveArtifacts allowEmptyArchive: true, artifacts: 'test-results/functional/**/*'
    }
  }
  
}

