import { Page } from 'playwright-core';
import BasePage from '../../../../../../../base/base-page.ts';
import { AllMethodsStep } from '../../../../../../../decorators/test-steps.ts';
import Party from '../../../../../../../enums/party.ts';
import CCDCaseData from '../../../../../../../models/ccd/ccd-case-data.ts';
import ExuiPage from '../../../../../exui-page/exui-page.ts';
import { subheadings, getRadioButtons, getInput } from './vulnerability-questions-content.ts';

@AllMethodsStep()
export default class VulnerabilityQuestionsPage extends ExuiPage(BasePage) {
  private party: Party;

constructor(page: Page, party: Party) {
  super(page);
  this.party = party;

}
  async verifyContent(ccdCaseData: CCDCaseData, defendantNumber: number) {
    await super.runVerifications([
      super.verifyHeadings(ccdCaseData),
      super.expectText(subheadings.vulnerability, {ignoreDuplicates: true}),
      super.expectText(getRadioButtons(this.party).text.label, {ignoreDuplicates: true}),
      super.expectText(getRadioButtons(this.party).radioYes.label, {ignoreDuplicates: true}),
      super.expectText(getRadioButtons(this.party).radioNo.label, {ignoreDuplicates: true}),
    ]);
  }

  async selectYes() {
    await super.clickBySelector(getRadioButtons(this.party).radioYes.selector);
    await super.inputText(getInput(this.party).selector, 'test');
  }

  async selectNo() {
    await super.clickBySelector(getRadioButtons(this.party).radioNo.selector);
  }

  async submit() {
    await super.retryClickSubmit();
  }
}
